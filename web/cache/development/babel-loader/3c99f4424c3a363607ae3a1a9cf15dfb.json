{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { setStatusBarBackgroundColor } from \"expo-status-bar\";\nimport * as firebase from \"firebase\";\nimport { useState } from \"react\";\nimport Aquarium from \"../models/Aquarium\";\nimport { doc, getDoc } from \"firebase/firestore\";\nvar aquariumList = [];\nvar temp = [];\nvar username = \"Owen\";\nexport function initialize() {\n  var firebaseConfig = {\n    apiKey: \"AIzaSyB-UJIjl7sZx6apBYVbzKm2ruHiOD35rc0\",\n    authDomain: \"my-aquarium-2.firebaseapp.com\",\n    projectId: \"my-aquarium-2\",\n    storageBucket: \"my-aquarium-2.appspot.com\",\n    messagingSenderId: \"367519102708\",\n    appId: \"1:367519102708:web:d9024a2c9a5d79b84110a1\",\n    measurementId: \"G-ME3SNM8T4C\"\n  };\n  firebase.initializeApp(firebaseConfig);\n  firebase.firestore().settings({\n    experimentalForceLongPolling: true\n  });\n}\nexport function addAquarium(aquarium, name) {\n  firebase.firestore().collection(\"users\").doc(\"Owen\").collection(name).add({\n    id: aquarium.id.id,\n    name: aquarium.id.name,\n    width: aquarium.id.width,\n    height: aquarium.id.height,\n    depth: aquarium.id.depth,\n    volume: aquarium.id.volume,\n    imageUrl: \"https://cdn.pixabay.com/photo/2018/07/11/21/51/toast-3532016_1280.jpg\",\n    type: \"salt\",\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(function () {\n    console.log(\"added\");\n  });\n}\nexport function getAquarium() {\n  var db, users, index, aquariumData;\n  return _regeneratorRuntime.async(function getAquarium$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          db = firebase.firestore();\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(db.collection(\"users\").get());\n\n        case 3:\n          users = _context.sent;\n          users.forEach(function (doc) {\n            console.log(\"======================\");\n            aquariumList.push(doc.data());\n            console.log(aquariumList[0].aq);\n          });\n          index = 0;\n\n        case 6:\n          if (!(index < aquariumList[0].aq.length)) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(db.collection(\"users\").doc(aquariumList[0].name).collection(aquariumList[0].aq[index]).get().then(function (iter) {\n            temp.forEach(function (doc) {\n              temp.push(doc.data());\n            });\n          }));\n\n        case 9:\n          aquariumData = _context.sent;\n\n        case 10:\n          index++;\n          _context.next = 6;\n          break;\n\n        case 13:\n          return _context.abrupt(\"return\", temp);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/nicho/Documents/VSCode/ass2/api/FirebaseApi.js"],"names":["setStatusBarBackgroundColor","firebase","useState","Aquarium","doc","getDoc","aquariumList","temp","username","initialize","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","firestore","settings","experimentalForceLongPolling","addAquarium","aquarium","name","collection","add","id","width","height","depth","volume","imageUrl","type","createdAt","FieldValue","serverTimestamp","then","console","log","getAquarium","db","get","users","forEach","push","data","aq","index","length","iter","aquariumData"],"mappings":"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","sourcesContent":["import { setStatusBarBackgroundColor } from \"expo-status-bar\";\r\nimport * as firebase from \"firebase\";\r\nimport { useState } from \"react\";\r\nimport Aquarium from \"../models/Aquarium\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\nconst aquariumList = [];\r\nconst temp = [];\r\n\r\nconst username = \"Owen\";\r\n\r\nexport function initialize() {\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyB-UJIjl7sZx6apBYVbzKm2ruHiOD35rc0\",\r\n    authDomain: \"my-aquarium-2.firebaseapp.com\",\r\n    projectId: \"my-aquarium-2\",\r\n    storageBucket: \"my-aquarium-2.appspot.com\",\r\n    messagingSenderId: \"367519102708\",\r\n    appId: \"1:367519102708:web:d9024a2c9a5d79b84110a1\",\r\n    measurementId: \"G-ME3SNM8T4C\",\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  firebase.firestore().settings({ experimentalForceLongPolling: true });\r\n}\r\n\r\nexport function addAquarium(aquarium, name) {\r\n  // console.log(aquarium.id);\r\n\r\n  firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .doc(\"Owen\")\r\n    .collection(name)\r\n    .add({\r\n      id: aquarium.id.id,\r\n      name: aquarium.id.name,\r\n      width: aquarium.id.width,\r\n      height: aquarium.id.height,\r\n      depth: aquarium.id.depth,\r\n      volume: aquarium.id.volume,\r\n      imageUrl:\r\n        \"https://cdn.pixabay.com/photo/2018/07/11/21/51/toast-3532016_1280.jpg\",\r\n      type: \"salt\",\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n    })\r\n    .then(() => {\r\n      console.log(\"added\");\r\n    });\r\n}\r\n\r\nexport async function getAquarium() {\r\n  const db = firebase.firestore();\r\n  //   const aquariumList = [];\r\n  //   const temp = [];\r\n\r\n  const users = await db\r\n    .collection(\"users\")\r\n    .get();\r\n\r\n  users.forEach((doc) => {\r\n    console.log(\"======================\");\r\n    aquariumList.push(doc.data());\r\n\r\n    console.log(aquariumList[0].aq);\r\n  });\r\n\r\n  for (let index = 0; index < aquariumList[0].aq.length; index++) {\r\n    const aquariumData = await db\r\n      .collection(\"users\") //main database\r\n      .doc(aquariumList[0].name)\r\n      .collection(aquariumList[0].aq[index])\r\n      .get()\r\n      .then((iter) => {\r\n        temp.forEach((doc) => {\r\n          temp.push(doc.data());\r\n        });\r\n      });\r\n  }\r\n  return temp;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}