{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\nicho\\\\Documents\\\\VSCode\\\\ass2\\\\screens\\\\addNewAquarium.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { getAquarium, addAquarium } from \"../api/FirebaseApi\";\nimport Aquarium from \"../models/Aquarium\";\nimport CameraScreen from \"./CameraScreen\";\nvar aquarium = null;\n\nvar AddNewAquarium = function AddNewAquarium(props) {\n  var parameters = [];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nameInput = _useState4[0],\n      setNameInput = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      widthInput = _useState6[0],\n      setWidthInput = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      heightInput = _useState8[0],\n      setHeightInput = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      depthInput = _useState10[0],\n      setDepthInput = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      volumeInput = _useState12[0],\n      setVolumeInput = _useState12[1];\n\n  var newAquarium = function newAquarium(id, name, width, height, depth, volume) {\n    var aq = new Aquarium({\n      id: id,\n      name: name,\n      width: width,\n      height: height,\n      depth: depth,\n      volume: volume\n    });\n    aquarium = aq;\n    console.log(\"storing data\");\n    storeData();\n    retrieveData();\n    return aq;\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.listItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.rowItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Name: \"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setNameInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.rowItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Width: \"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setWidthInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.rowItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Height: \"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setHeightInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.rowItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Depth: \"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setDepthInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.rowItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Volume: \"), React.createElement(TextInput, {\n    style: styles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setVolumeInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  })), React.createElement(Button, {\n    title: \"submit\",\n    onPress: function onPress() {\n      var aq = newAquarium(\"random\", nameInput, widthInput, heightInput, depthInput, volumeInput);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"get\",\n    onPress: function onPress() {\n      getAquarium();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar storeData = function storeData() {\n  return _regeneratorRuntime.async(function storeData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          if (!(aquarium !== null)) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"b\", JSON.stringify(aquarium)));\n\n        case 4:\n          console.log(\"data stored\");\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar retrieveData = function retrieveData() {\n  var value;\n  return _regeneratorRuntime.async(function retrieveData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"b\"));\n\n        case 3:\n          value = _context3.sent;\n\n          if (value !== null) {\n            console.log(\"========\");\n            console.log(JSON.parse(value));\n            console.log(\"=====success=====\");\n          }\n\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar styles = StyleSheet.create({\n  screen: {},\n  listItem: {\n    padding: 10,\n    width: \"90%\"\n  },\n  rowItem: {\n    padding: 10,\n    flexDirection: \"row\"\n  },\n  textStyle: {\n    fontSize: 22,\n    flex: 1,\n    textAlign: \"right\"\n  },\n  textInput: {\n    fontSize: 18,\n    borderColor: \"black\",\n    borderWidth: 1,\n    width: \"60%\",\n    height: 35,\n    borderRadius: 4\n  }\n});\nexport default AddNewAquarium;","map":{"version":3,"sources":["C:/Users/nicho/Documents/VSCode/ass2/screens/addNewAquarium.js"],"names":["React","useState","AsyncStorage","ImagePicker","getAquarium","addAquarium","Aquarium","CameraScreen","aquarium","AddNewAquarium","props","parameters","image","setImage","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","result","cancelled","uri","nameInput","setNameInput","widthInput","setWidthInput","heightInput","setHeightInput","depthInput","setDepthInput","volumeInput","setVolumeInput","newAquarium","id","name","width","height","depth","volume","aq","console","log","storeData","retrieveData","styles","screen","listItem","rowItem","textStyle","textInput","text","setItem","JSON","stringify","getItem","value","parse","StyleSheet","create","padding","flexDirection","fontSize","flex","textAlign","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  StyleSheet,\r\n  Button,\r\n  AsyncStorage,\r\n} from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport { getAquarium, addAquarium } from \"../api/FirebaseApi\";\r\n\r\nimport Aquarium from \"../models/Aquarium\";\r\n\r\nimport CameraScreen from \"./CameraScreen\";\r\n\r\nvar aquarium = null;\r\n\r\nconst AddNewAquarium = (props) => {\r\n  const parameters = [];\r\n\r\n  const [image, setImage] = useState(null);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n    });\r\n\r\n    if (result.cancelled) {\r\n      setImage(result.uri);\r\n    }\r\n  };\r\n\r\n  //title: New Aquarium\r\n  //text input for name\r\n  //text inputs for dimensions and volume\r\n  //tickbox for salt or freshwater\r\n  //add button to add more parameters\r\n  //text input for each parameter\r\n  //add button for creatures\r\n  //number input for each creature (quantity)\r\n  //add button for coral (salt only)\r\n  //number input for each coral (quantity)\r\n  //add button for plants\r\n  //number input for each plant (quantity)\r\n\r\n  //discard/confirm buttons\r\n  //discard will discard changes and not save anything\r\n  //confirm will save data to firebase and local database\r\n\r\n  const [nameInput, setNameInput] = useState(\"\");\r\n  const [widthInput, setWidthInput] = useState(\"\");\r\n  const [heightInput, setHeightInput] = useState(\"\");\r\n  const [depthInput, setDepthInput] = useState(\"\");\r\n  const [volumeInput, setVolumeInput] = useState(\"\");\r\n\r\n  \r\n\r\n  const newAquarium = (id, name, width, height, depth, volume) => {\r\n    let aq = new Aquarium({\r\n      id: id,\r\n      name: name,\r\n      width: width,\r\n      height: height,\r\n      depth: depth,\r\n      volume: volume,\r\n    });\r\n    aquarium = aq;\r\n\r\n    console.log(\"storing data\");\r\n\r\n    storeData();\r\n    retrieveData();\r\n\r\n    return aq;\r\n  };\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <View style={styles.listItem}>\r\n        <View style={styles.rowItem}>\r\n          <Text style={styles.textStyle}>Name: </Text>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            onChangeText={(text) => setNameInput(text)}\r\n          />\r\n        </View>\r\n        <View style={styles.rowItem}>\r\n          <Text style={styles.textStyle}>Width: </Text>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            onChangeText={(text) => setWidthInput(text)}\r\n          />\r\n        </View>\r\n        <View style={styles.rowItem}>\r\n          <Text style={styles.textStyle}>Height: </Text>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            onChangeText={(text) => setHeightInput(text)}\r\n          />\r\n        </View>\r\n        <View style={styles.rowItem}>\r\n          <Text style={styles.textStyle}>Depth: </Text>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            onChangeText={(text) => setDepthInput(text)}\r\n          />\r\n        </View>\r\n        <View style={styles.rowItem}>\r\n          <Text style={styles.textStyle}>Volume: </Text>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            onChangeText={(text) => setVolumeInput(text)}\r\n          />\r\n        </View>\r\n        {/* <Button title=\"hello\" \r\n        onPress={() => {\r\n          props.navigation.navigate({\r\n            routeName: \"Camera\",\r\n          });\r\n        }} /> */}\r\n        <Button\r\n          title=\"submit\"\r\n          onPress={() => {\r\n            let aq = newAquarium(\r\n              \"random\",\r\n              nameInput,\r\n              widthInput,\r\n              heightInput,\r\n              depthInput,\r\n              volumeInput\r\n            );\r\n            // addAquarium(aq, nameInput);\r\n          }}\r\n        />\r\n        <Button\r\n          title=\"get\"\r\n          onPress={() => {\r\n            getAquarium();\r\n          }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst storeData = async () => {\r\n  try {\r\n    if (aquarium !== null) {\r\n      await AsyncStorage.setItem(\"b\", JSON.stringify(aquarium));\r\n    }\r\n    console.log(\"data stored\");\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst retrieveData = async () => {\r\n  try {\r\n    const value = await AsyncStorage.getItem(\"b\");\r\n    if (value !== null) {\r\n      console.log(\"========\")\r\n      console.log(JSON.parse(value));\r\n      console.log(\"=====success=====\")\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    //   justifyContent: 'flex-start',\r\n  },\r\n  listItem: {\r\n    padding: 10,\r\n    width: \"90%\",\r\n    // alignItems: 'center',\r\n  },\r\n  rowItem: {\r\n    padding: 10,\r\n    flexDirection: \"row\",\r\n  },\r\n  textStyle: {\r\n    fontSize: 22,\r\n    flex: 1,\r\n    textAlign: \"right\",\r\n  },\r\n  textInput: {\r\n    fontSize: 18,\r\n    borderColor: \"black\",\r\n    borderWidth: 1,\r\n    width: \"60%\",\r\n    height: 35,\r\n    borderRadius: 4,\r\n  },\r\n});\r\n\r\nexport default AddNewAquarium;\r\n"]},"metadata":{},"sourceType":"module"}